package zad1.Services;

import zad1.Models.Book;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DbService {
    public static final String QUERY_STANDARD = "SELECT WYDAWCA.NAME, AUTOR.NAME, TYTUL, CENA FROM POZYCJE INNER JOIN AUTOR ON POZYCJE.AUTID = AUTOR.AUTID INNER JOIN WYDAWCA ON POZYCJE.WYDID = WYDAWCA.WYDID";

    private static final String URL = "jdbc:derby:database;create=true";
    private static final String QUERY_DDL = "SQL/DDL";

    private static final HashMap<String, String> translations = new HashMap<String, String>() {{
        put("Publisher", "WYDAWCA.NAME");
        put("Author", "AUTOR.NAME");
        put("Title", "TYTUL");
    }};

    private Connection connection;

    public DbService() {
        try {
            DriverManager.registerDriver(new org.apache.derby.jdbc.EmbeddedDriver());
            connection = DriverManager.getConnection(URL);
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        createRowsIfNotExist();
        executeDDL(DDL.split(";"));
    }

    public static String CREATE_QUERY(String id, String filter) {
        StringBuilder query = new StringBuilder(QUERY_STANDARD + " WHERE ");
        for (Map.Entry<String, String> entry : translations.entrySet())
            if (entry.getKey().equals(id))
                query.append(entry.getValue());
        query.append(" = ").append("'").append(filter.trim()).append("'");
        return query.toString();
    }

    public static String[] READ_DDL() {
        StringBuilder query = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(QUERY_DDL))) {
            String line;
            while (null != (line = br.readLine()))
                query.append(line);
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return query.toString().split(";");
    }

    public void executeDDL(String[] queries) {
        try {
            for (String q : queries)
                connection.createStatement().execute(q);
        } catch (Exception ignored) { }
    }

    public List<Book> getBooksFromDb(String query) {
        ArrayList<Book> books = new ArrayList<>();
        try {
            ResultSet resultSet = connection.createStatement().executeQuery(query);
            while (resultSet.next())
                books.add(new Book(
                        resultSet.getString(1),
                        resultSet.getString(2),
                        resultSet.getString(3),
                        resultSet.getDouble(4)
                ));
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return books;
    }

    public void createRowsIfNotExist() {
        File author = new File("AUTOR_s20363.TXT");
        File book = new File("POZYCJE_s20363.TXT");
        File publisher = new File("WYDAWCA_s20363.TXT");
        try {
            if (author.createNewFile())
                Files.write(author.toPath(), AUTOR.getBytes(StandardCharsets.UTF_8));
            if (book.createNewFile())
                Files.write(book.toPath(), POZYCJE.getBytes(StandardCharsets.UTF_8));
            if (publisher.createNewFile())
                Files.write(publisher.toPath(), WYDAWCA.getBytes(StandardCharsets.UTF_8));
        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }

    public final String DDL = "create table AUTOR (\n" +
            "                       AUTID integer not null generated by default as identity,\n" +
            "                       NAME varchar(255) not null,\n" +
            "                       PRIMARY KEY(AUTID)\n" +
            ");\n" +
            "create table WYDAWCA (\n" +
            "                         WYDID integer not null generated by default as identity,\n" +
            "                         NAME varchar(255) not null,\n" +
            "                         PRIMARY KEY(WYDID)\n" +
            ");\n" +
            "CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE (null,'AUTOR','AUTOR_s20363.TXT',null,null,'utf-8',0);\n" +
            "CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE (null,'WYDAWCA','WYDAWCA_s20363.TXT',null,null,'utf-8',0);\n" +
            "create table POZYCJE (\n" +
            "                         ISBN char(13) not null,\n" +
            "                         AUTID integer not null,\n" +
            "                         TYTUL varchar(255) not null,\n" +
            "                         WYDID integer not null,\n" +
            "                         ROK integer not null,\n" +
            "                         CENA real,\n" +
            "                         PRIMARY KEY(ISBN),\n" +
            "                         FOREIGN KEY(AUTID) REFERENCES AUTOR(AUTID),\n" +
            "                         FOREIGN KEY(WYDID) REFERENCES WYDAWCA(WYDID)\n" +
            ");\n" +
            "CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE (null,'POZYCJE','POZYCJE_s20363.TXT',null,null,'utf-8',0);";

    private static final String AUTOR = "1,Miller P. (red.)\n" +
            "2,Chismar J.\n" +
            "3,Blaszczyk\n" +
            "4,Lech B.\n" +
            "5,Cassel P. Eddy C.\n" +
            "6,Mitchell S.\n" +
            "7,Huzar Z. Fryślewicz Z. Dubil\n" +
            "8,Cytowski J.\n" +
            "9,Banachowski L. Diks K. Rytter\n" +
            "10,Stephens R.\n" +
            "11,Sysło M. Deo N.\n" +
            "12,Wróblewski P.\n" +
            "13,zbiorowa\n" +
            "14,Muller R.\n" +
            "15,Banachowski L.\n" +
            "16,Barteczko K.\n" +
            "17,Arnold K. Gosling J.\n" +
            "18,Bielecki J.\n" +
            "19,Boone B.\n" +
            "20,Harrington J.L.\n" +
            "21,Lausen G. Vossen G.\n";

    private static final String POZYCJE = "83-7197-252-0,1,\"3D Studio MAX 3. Doskonałość i precyzja-suplement\",1,2001,41.00\n" +
            "83-7197-178-8,2,\"3D Studio Max 3. Efektywna animacja w praktyce\",1,1999,63.00\n" +
            "83-87297-70-4,3,\"ABC HTML 2001\",2,2001,20.00\n" +
            "83-87297-36-4,4,\"ABC Internetu 2000\",2,2000,18.50\n" +
            "83-7197-067-6,5,\"Access 97. Baza danych dla każdego\",1,1999,66.50\n" +
            "83-7197-291-1,6,\"Active Server Pages 3.0 dla każdego\",1,2001,73.00\n" +
            "83-86718-38-2,7,\"ADA 95\",1,1998,35.00\n" +
            "83-7101-255-7,8,\"Algorytmy genetyczne. Podstawy i zastosowania\",3,1996,11.50\n" +
            "83-204-1995-6,9,\"Algorytmy i struktury danych\",4,1996,28.00\n" +
            "83-7197-131-1,10,\"Algorytmy i struktury danych z przykładami w Delphi\",1,2000,42.00\n" +
            "83-01-11818-0,11,\"Algorytmy optymalizacji dyskretnej z programami w języku pas\",5,2000,44.00\n" +
            "83-85701-98-2,12,\"Algorytmy struktury danych i techniki programowania\",1,1996,30.00\n" +
            "0860-3928    ,13,\"Bazy danych i sieci komputerowe-stan i perspektywy rozwoju\",6,1996,7.00\n" +
            "0434-0825    ,13,\"Bazy danych w lokalnych sieciach komputerowych oraz systemac\",7,1994,10.00\n" +
            "83-7297-000-0,14,\"Bazy danych. Język UML w modelowaniu danych\",8,2000,56.00\n" +
            "83-7101-377-9,15,\"Bazy danych. Tworzenie aplikacji\",3,1998,33.50\n" +
            "83-7279-066-3,16,\"Java. Wykłady i ćwiczenia\",8,2000,528.00\n" +
            "83-204-2313-9,17,\"Java\",4,1999,672.00\n" +
            "83-7197-153-2,18,\"Java 3\",1,1999,1024.00\n" +
            "83-7197-169-9,18,\"Java 3 RMI. Podst. programowania rozproszonego\",1,2000,472.00\n" +
            "83-7197-363-2,18,\"Java 4 Swing. t. I/II\",1,2000,1280.00\n" +
            "83-204-2265-5,19,\"Java dla programistów C i C++\",4,1998,608.00\n" +
            "83-7279-090-6,20,\"Obiektowe bazy danych dla każdego\",8,2001,32.00\n" +
            "83-204-2487-9,21,\"Obiektowe bazy danych. Modele danych i języki\",4,2000,40.00\n";

    private static final String WYDAWCA = "1,Helion Wydawnictwo\n" +
            "2,Editions 2000\n" +
            "3,PLJ Akademicka Oficyna\n" +
            "4,Wydawnictwo Naukowo-Techniczne\n" +
            "5,Państwowe Wydawnictwo Naukowe\n" +
            "6,Politechnika Szczecińska\n" +
            "7,Politechnika Śląska\n" +
            "8,Mikom\n";
}